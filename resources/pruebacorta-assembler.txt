.586 
option casemap :none 
include \masm32\include\masm32rt.inc 
includelib \masm32\lib\kernel32.lib 
includelib \masm32\lib\user32.lib 
includelib \masm32\lib\masm32.lib 

dll_dllcrt0 PROTO C
printf PROTO C : VARARG 

.data 
Error_DivisionCero DB "Error: Division por cero", 10, 0 
Error_Overflow DB "Error: Overflow en producto entre Enteros", 10, 0 
Error_Subtipo_inferior DB "Error: Valor menor al rango inferior del subtipo ", 10, 0 
Error_Subtipo_superior DB "Error: Valor mayor al limite superior del subtipo ", 10, 0 
ESPERAR_ACCION_USUARIO DB "Haga click en ACEPTAR para cerrar el programa y la consola", 10, 0 
$_$mensajeEntero$_$ DB "%d, %d, %d", 10, 0 
$_$mensajeFloat$_$ DB "%f, %f, %f", 10, 0 
e$MAIN DW ?, ?, ?
@ParametroRealInt DW ?
@ParametroRealFloat DQ ?
integer1 DW 1
integer2 DW 2
integer3 DW 3
d$MAIN DW ?, ?, ?
@aux3 DW ?
integer30 DW 30
@aux2 DW ?
tint$MAIN DW ?, ?, ?
integer20 DW 20
@aux1 DW ?
integer10 DW 10

.code 
 
start: 
MOV ECX, OFFSET d$MAIN
MOV AX, [ECX + 0] 
MOV @aux1, AX 
 
MOV ECX, OFFSET d$MAIN
MOV AX, integer10
MOV [ECX + 0], AX 
 
MOV ECX, OFFSET d$MAIN
MOV AX, [ECX + 2] 
MOV @aux2, AX 
 
MOV ECX, OFFSET d$MAIN
MOV AX, integer20
MOV [ECX + 2], AX 
 
MOV ECX, OFFSET d$MAIN
MOV AX, [ECX + 4] 
MOV @aux3, AX 
 
MOV ECX, OFFSET d$MAIN
MOV AX, integer30
MOV [ECX + 4], AX 
 
MOVZX EAX, WORD PTR [d$MAIN + 4] 
PUSH EAX 
MOVZX EAX, WORD PTR [d$MAIN + 2] 
PUSH EAX 
MOVZX EAX, WORD PTR [d$MAIN + 0] 
PUSH EAX 
PUSH OFFSET $_$mensajeEntero$_$ 
CALL printf 
ADD ESP, 16 
 
JMP fin 
 
Divison_Por_Cero:
invoke MessageBox, NULL, addr Error_DivisionCero, addr Error_DivisionCero, MB_OK 
JMP fin

Overflow:
invoke MessageBox, NULL, addr Error_Overflow, addr Error_Overflow, MB_OK 
JMP fin

Subtipo_inferior:
invoke MessageBox, NULL, addr Error_Subtipo_inferior, addr Error_Subtipo_inferior, MB_OK 
JMP fin

Subtipo_superior:
invoke MessageBox, NULL, addr Error_Subtipo_superior, addr Error_Subtipo_superior, MB_OK 
JMP fin

fin: 
invoke MessageBox, NULL, addr ESPERAR_ACCION_USUARIO, addr ESPERAR_ACCION_USUARIO, MB_OK 
invoke ExitProcess, 0 
end start