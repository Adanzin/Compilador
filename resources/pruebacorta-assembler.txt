.586 
option casemap :none 
include \masm32\include\masm32rt.inc 
includelib \masm32\lib\kernel32.lib 
includelib \masm32\lib\user32.lib 
includelib \masm32\lib\masm32.lib 

dll_dllcrt0 PROTO C
printf PROTO C : VARARG 

.data 
Error_DivisionCero DB "Error: Division por cero", 10, 0 
Error_Overflow DB "Error: Overflow en producto entre Enteros", 10, 0 
Error_Subtipo_inferior DB "Error: Valor menor al rango inferior del subtipo ", 10, 0 
Error_Subtipo_superior DB "Error: Valor mayor al limite superior del subtipo ", 10, 0 
ESPERAR_ACCION_USUARIO DB "Haga click en ACEPTAR para cerrar el programa y la consola", 10, 0 
integer99 DW 99
b$MAIN DW ?, -100, 100
@ParametroRealInt DW ?
@aux4 DW ?, -100, 100
@ParametroRealFloat DQ ?
integer0 DW 0
integer100 DW 100
integer-100 DW -100
integer2 DW 2
integer3 DW 3
flotadito$MAIN DW ?, -100, 100
c$MAIN DW ?, -100, 100
a$MAIN DW ?, -100, 100
d$MAIN DW ?
@aux3 DW ?, -100, 100
@aux2 DW ?, -100, 100
@aux1 DW ?, -100, 100

.code 
 
start: 
MOV AX, integer0
MOV d$MAIN, AX

 
MOV ECX, OFFSET integer99
MOV EDX, OFFSET a$MAIN
MOV AX, [ECX]  
MOV BX, [EDX] 
MOV [a$MAIN], AX 

 
MOV ECX, OFFSET integer3
MOV EDX, OFFSET b$MAIN
MOV AX, [ECX]  
MOV BX, [EDX] 
MOV [b$MAIN], AX 

 
MOV ECX, OFFSET integer2
MOV EDX, OFFSET c$MAIN
MOV AX, [ECX]  
MOV BX, [EDX] 
MOV [c$MAIN], AX 

 
MOV ECX, OFFSET a$MAIN
MOV EDX, OFFSET b$MAIN
MOV AX, [ECX]  
MOV BX, [EDX] 
ADD AX, BX 
CMP AX, [ECX + 2] 
JL Subtipo_inferior 
CMP AX, [ECX + 4] 
JG Subtipo_superior 
MOV [@aux1], AX
 
invoke printf, cfm$("%hi\n"), @aux1
 
MOV ECX, OFFSET a$MAIN
MOV EDX, OFFSET b$MAIN
MOV AX, [ECX]  
MOV BX, [EDX] 
SUB AX, BX 
CMP AX, [ECX + 2] 
JL Subtipo_inferior 
CMP AX, [ECX + 4] 
JG Subtipo_superior 
MOV [@aux2], AX
 
invoke printf, cfm$("%hi\n"), @aux2
 
MOV ECX, OFFSET a$MAIN
MOV EDX, OFFSET c$MAIN
MOV AX, [ECX]  
MOV BX, [EDX] 
IMUL BX 
CMP AX, [ECX + 2] 
JL Subtipo_inferior 
CMP AX, [ECX + 4] 
JG Subtipo_superior 
MOV [@aux3], AX
 
invoke printf, cfm$("%hi\n"), @aux3
 
MOV ECX, OFFSET a$MAIN
MOV EDX, OFFSET c$MAIN
MOV AX, [ECX]  
MOV BX, [EDX] 
MOV DX, 0 
CMP BX,0
JE Divison_Por_Cero 
IDIV BX 
MOV [@aux4], AX
 
invoke printf, cfm$("%hi\n"), @aux4
 
JMP fin 
 
Divison_Por_Cero:
invoke MessageBox, NULL, addr Error_DivisionCero, addr Error_DivisionCero, MB_OK 
JMP fin

Overflow:
invoke MessageBox, NULL, addr Error_Overflow, addr Error_Overflow, MB_OK 
JMP fin

Subtipo_inferior:
invoke MessageBox, NULL, addr Error_Subtipo_inferior, addr Error_Subtipo_inferior, MB_OK 
JMP fin

Subtipo_superior:
invoke MessageBox, NULL, addr Error_Subtipo_superior, addr Error_Subtipo_superior, MB_OK 
JMP fin

fin: 
invoke MessageBox, NULL, addr ESPERAR_ACCION_USUARIO, addr ESPERAR_ACCION_USUARIO, MB_OK 
invoke ExitProcess, 0 
end start